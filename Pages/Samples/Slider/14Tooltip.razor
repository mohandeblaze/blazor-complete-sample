@page "/Slider/14Tooltip"

<h4 class="sample-title">Slider with Tooltip</h4>

<div class="content-wrapper">
    <div class="sliderwrap">
        <label class="userselect">Default Slider</label>
        <EJSSlider ID="default" Value="30" ShowButtons="true">
            <SliderTooltipData IsVisible="true" ShowOn="@currentShowOn" Placement="@currentPalacement"></SliderTooltipData>
        </EJSSlider>
    </div>
    <div class="sliderwrap">
        <label class="userselect">Range Slider</label>
        <EJSSlider ID="range" Type=SliderType.Range Value="@val" ShowButtons="true">
            <SliderTooltipData IsVisible="true" ShowOn="@currentShowOn" Placement="@currentPalacement"></SliderTooltipData>
        </EJSSlider>
    </div>
</div>

@code{
    int[] val = { 30, 70 };
    List<object> placement = new List<object>();
    List<object> showON = new List<object>();

    Dictionary<string, TooltipPlacement> PlacementTypes = new Dictionary<string, TooltipPlacement>();

    Dictionary<string, TooltipShowOn> ShowOnTypes = new Dictionary<string, TooltipShowOn>();

    TooltipShowOn currentShowOn = TooltipShowOn.Focus;
    TooltipPlacement currentPalacement = TooltipPlacement.Before;

    protected override void OnInit()
    {
        base.OnInit();
        this.placement.Add(new { value = "Before", text = "Before" });
        this.placement.Add(new { value = "After", text = "After" });

        PlacementTypes.Add("Before", TooltipPlacement.Before);
        PlacementTypes.Add("After", TooltipPlacement.After);

        this.showON.Add(new { value = "Auto", text = "Auto" });
        this.showON.Add(new { value = "Focus", text = "Focus" });
        this.showON.Add(new { value = "Hover", text = "Hover" });
        this.showON.Add(new { value = "Always", text = "Always" });

        ShowOnTypes.Add("Auto", TooltipShowOn.Auto);
        ShowOnTypes.Add("Focus", TooltipShowOn.Focus);
        ShowOnTypes.Add("Hover", TooltipShowOn.Hover);
        ShowOnTypes.Add("Always", TooltipShowOn.Always);
    }

    //void onPlacementChange(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs args)
    //{
    //    PlacementTypes.TryGetValue(args.Value.ToString(), out currentPalacement);
    //    this.StateHasChanged();
    //}

    //void onShowOnChange(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs args)
    //{
    //    ShowOnTypes.TryGetValue(args.Value.ToString(), out currentShowOn);
    //    this.StateHasChanged();
    //}
}
<style>



    .material #property tr#slider-showon {
        display: none;
    }

    .content-wrapper {
        width: 52%;
        margin: 0 auto;
        min-width: 185px;
    }

    .sliderwrap {
        margin-top: 45px;
        margin-left: -20%;
    }

        .sliderwrap label {
            padding-bottom: 26px;
            font-size: 13px;
            font-weight: 500;
            margin-top: 15px;
        }

    .userselect {
        -webkit-user-select: none; /* Safari 3.1+ */
        -moz-user-select: none; /* Firefox 2+ */
        -ms-user-select: none; /* IE 10+ */
        user-select: none; /* Standard syntax */
    }
</style>
