@page "/listview/16PublicMethods"
@using Newtonsoft.Json
@using Syncfusion.EJ2.Blazor
@using Model

<h4 class="sample-title">List Public Methods</h4>

<div style="display: flex;">
    <div style="margin: 10px;">
        <EjsListView ID="firstlist"
                     @ref="NormalList"
                     @ref:suppressField
                     HtmlAttributes="@HTMLProps"
                     DataSource="@DataSource"
                     ShowHeader="true"
                     HeaderTitle="Normal List">
            <ListViewFieldSettings Id="Id" Text="Text"></ListViewFieldSettings>
        </EjsListView>
    </div>

    <div style="margin: 10px;">
        <EjsListView ID="secondlist"
                     @ref="CheckList"
                     @ref:suppressField
                     HtmlAttributes="@HTMLProps"
                     DataSource="@DataSource"
                     ShowHeader="true"
                     ShowCheckBox="true"
                     HeaderTitle="CheckList">
            <ListViewFieldSettings Id="Id" Text="Text"></ListViewFieldSettings>
        </EjsListView>
    </div>
    <div style="margin: 10px;">
        <EjsListView ID="thirdlist"
                     @ref="NestedList"
                     @ref:suppressField
                     HtmlAttributes="@HTMLProps"
                     DataSource="@NestedDataSource"
                     ShowHeader="true"
                     ShowCheckBox="false"
                     HeaderTitle="NestedList"
                     ModelType="@model">
            <ListViewFieldSettings Id="Id" Text="Text" Child="Child"></ListViewFieldSettings>
            <ListViewTemplates>
                <Template>
                    <div>Template item @((context as ListDataModel).Text)</div>
                </Template>
            </ListViewTemplates>
        </EjsListView>
    </div>
</div>

<div style="display: flex;flex-wrap: wrap;justify-content: flex-start;">
    <div class="padding">
        <div class="bold">Normal List Selected item</div>
        @{
            @if (NormalListSelected != null)
            {
                @foreach (var itemValue in NormalListSelected)
                {
                    <div id="getselecteditem_content" class="italic">@(itemValue.Text)</div>
                }
            }
            else
            {
                <div id="getselecteditem_content" class="italic">Nothing Yet</div>
            }

        }

        <button id="getselecteditem" class="e-btn e-info" @onclick="@GetSelectedItems">Get Selected items</button>
    </div>

    <div class="padding">
        <div class="bold">Check List Selected item</div>
        @{
            @if (CheckListSelected != null)
            {
                @foreach (var itemValue in CheckListSelected)
                {
                    <div id="getselecteditem_content" class="italic">@(itemValue.Text)</div>
                }
            }
            else
            {
                <div id="getselecteditem_content" class="italic">Nothing Yet</div>
            }

        }

    </div>

    <div class="padding">
        <div class="bold">Nested List Selected item</div>
        @{
            @if (NestedListSelected != null)
            {
                @foreach (var itemValue in NestedListSelected)
                {
                    <div id="getselecteditem_content" class="italic">@(itemValue.Text)</div>
                }
            }
            else
            {
                <div id="getselecteditem_content" class="italic">Nothing Yet</div>
            }

        }

    </div>

    <div class="padding">
        <div class="bold">Select item</div>
        <div class="italic">Void</div>
        <button class="e-btn e-info" @onclick="@SelectItem">Select item</button>
    </div>

    <div class="padding">
        <div class="bold">Find item</div>
        <div class="italic">@(FindItemValue?.Text ?? "Nothing Yet")</div>
        <button class="e-btn e-info" @onclick="@FindItem">Find item</button>
    </div>

    <div class="padding">
        <div class="bold">Check item</div>
        <div class="italic">Void</div>
        <button id="checkitem" class="e-btn e-info" @onclick="@CheckItem">Check item</button>
    </div>

    <div class="padding">
        <div class="bold">UnCheck item</div>
        <div class="italic">Void</div>
        <button id="uncheckitem" class="e-btn e-info" @onclick="@UnCheckItem">UnCheck item</button>
    </div>

    <div class="padding">
        <div class="bold">CheckAll items</div>
        <div class="italic">Void</div>
        <button id="checkall" class="e-btn e-info" @onclick="@CheckAllItems">CheckAll items</button>
    </div>

    <div class="padding">
        <div class="bold">UnCheckAll items</div>
        <div class="italic">Void</div>
        <button id="uncheckall" class="e-btn e-info" @onclick="@UnCheckAllItems">UnCheckAll items</button>
    </div>

    <div class="padding">
        <div class="bold">Go back in NestedList</div>
        <div class="italic">Void</div>
        <button id="goback" class="e-btn e-info" @onclick="@GoBack">Go Back</button>
    </div>

    <div class="padding">
        <div class="bold">Add item in List</div>
        <div class="italic">Void</div>
        <button class="e-btn e-info" @onclick="@AddItem">Add item</button>
    </div>

    <div class="padding">
        <div class="bold">Remove item in List</div>
        <div class="italic">Void</div>
        <button class="e-btn e-info" @onclick="@RemoveItem">Remove item</button>
    </div>

    <div class="padding">
        <div class="bold">Disable Item</div>
        <div class="italic">Void</div>
        <button id="disableitem" class="e-btn e-info" @onclick="@DisableItem">Disable item</button>
    </div>

    <div class="padding">
        <div class="bold">Enable Item</div>
        <div class="italic">Void</div>
        <button id="enableitem" class="e-btn e-info" @onclick="@EnableItem">Enable item</button>
    </div>

    <div class="padding">
        <div class="bold">Hide Item</div>
        <div class="italic">Void</div>
        <button id="hideitem" class="e-btn e-info" @onclick="@HideItem">Hide item</button>
    </div>

    <div class="padding">
        <div class="bold">Show Item</div>
        <div class="italic">Void</div>
        <button id="showitem" class="e-btn e-info" @onclick="@ShowItem">Show item</button>
    </div>
</div>

@code {
    List<ListDataModel> _DataModel = new List<ListDataModel>();

    EjsListView<ListDataModel> NormalList;

    EjsListView<ListDataModel> CheckList;

    EjsListView<ListDataModel> NestedList;

    List<ListDataModel> NormalListSelected;

    List<ListDataModel> CheckListSelected;

    List<ListDataModel> NestedListSelected;

    ListDataModel FindItemValue;

    ListDataModel model = new ListDataModel();

    Dictionary<string, object> HTMLProps = new Dictionary<string, object>() {
        { "style", "border: 1px dashed blue" }
    };

    List<ListDataModel> DataSource = new List<ListDataModel>() {
        new ListDataModel {
            Id = "1",
            Text = "Data 1"
        },
        new ListDataModel {
            Id = "2",
            Text = "Data 2"
        },
        new ListDataModel {
            Id = "3",
            Text = "Data 3"
        },
        new ListDataModel {
            Id = "4",
            Text = "Data 4"
        },
    };

    List<ListDataModel> NestedDataSource = new List<ListDataModel>() {
        new ListDataModel {
            Id = "1",
            Text = "Data 1",
            Child = new List < ListDataModel > () {
                new ListDataModel {
                    Id = "1-1",
                    Text = "Child Data 1"
                }
            }
        },
        new ListDataModel {
            Id = "2",
            Text = "Data 2",
            Child = new List < ListDataModel > () {
                new ListDataModel {
                    Id = "2-1",
                    Text = "Child Data 2"
                }
            }
        },
        new ListDataModel {
            Id = "3",
            Text = "Data 3",
            Child = new List < ListDataModel > () {
                new ListDataModel {
                    Id = "3-1",
                    Text = "Child Data 3"
                }
            }
        },
        new ListDataModel {
            Id = "4",
            Text = "Data 4",
            Child = new List < ListDataModel > () {
                new ListDataModel {
                    Id = "4-1",
                    Text = "Child Data 4"
                }
            }
        },
    };

    async void GetSelectedItems()
    {
        ListSelectedItem<ListDataModel> item = await NormalList.GetSelectedItems();

        NormalListSelected = item.Data;

        item = await CheckList.GetSelectedItems();

        CheckListSelected = item.Data;

        item = await NestedList.GetSelectedItems();

        NestedListSelected = item.Data;

        this.StateHasChanged();
    }

    void SelectItem()
    {
        NormalList.SelectItem(DataSource[0]);
        NestedList.SelectItem(NestedDataSource[0]);
    }

    async void FindItem()
    {
        ListDataModel data = new ListDataModel
        {
            Id = "1",
            Text = "Data 1"
        };
        var item = await NormalList.FindItem(data);
        if (item != null)
        {
            FindItemValue = item;
            this.StateHasChanged();
        }
    }

    void CheckItem()
    {
        ListDataModel data = new ListDataModel
        {
            Id = "1",
            Text = "Data 1"
        };
        CheckList.CheckItem(data);
    }

    void UnCheckItem()
    {
        ListDataModel data = new ListDataModel
        {
            Id = "1",
            Text = "Data 1"
        };
        CheckList.UncheckItem(data);
    }

    void CheckAllItems()
    {
        CheckList.CheckAllItems();
    }

    void UnCheckAllItems()
    {
        CheckList.UncheckAllItems();
    }

    void GoBack()
    {
        NestedList.Back();
    }

    void AddItem()
    {
        ListDataModel[] data = new ListDataModel[] {
            new ListDataModel {
                Id = "5",
                Text = "New Data 5"
            }
        };
        NormalList.AddItem(data, null);
    }

    void RemoveItem()
    {
        ListDataModel data = new ListDataModel
        {
            Id = "1",
            Text = "Data 1"
        };
        NormalList.RemoveItem(data);
    }

    void DisableItem()
    {
        ListDataModel data = new ListDataModel
        {
            Id = "1",
            Text = "Data 1"
        };
        NormalList.DisableItem(data);
        CheckList.DisableItem(data);
        NestedList.DisableItem(data);
    }

    void EnableItem()
    {
        ListDataModel data = new ListDataModel
        {
            Id = "1",
            Text = "Data 1"
        };
        NormalList.EnableItem(data);
        CheckList.EnableItem(data);
        NestedList.EnableItem(data);
    }

    void HideItem()
    {
        ListDataModel data = new ListDataModel
        {
            Id = "2",
            Text = "Data 2"
        };
        NormalList.HideItem(data);
        CheckList.HideItem(data);
        NestedList.HideItem(data);
    }

    void ShowItem()
    {
        ListDataModel data = new ListDataModel
        {
            Id = "2",
            Text = "Data 2"
        };
        NormalList.ShowItem(data);
        CheckList.ShowItem(data);
        NestedList.ShowItem(data);
    }
}

<style>
    .padding {
        margin: 10px;
    }

        .padding * {
            margin: 5px 10px;
        }

    .e-listview {
        margin: 10px;
    }

    .bold {
        font-weight: bold;
    }

    .italic {
        font-style: italic;
    }
</style>
