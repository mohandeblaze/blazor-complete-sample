@page "/Treeview/17Events"

<h4 class="sample-title">Treeview Events</h4>

<div class="control-section">
    <div class="control_wrapper">
        <EjsTreeView id="treedata"
                     AllowEditing="true"
                     Created="@((e) => { EventTriggeredList.Add("Created");  this.StateHasChanged();})"
                     DataBound="@((e) => { EventTriggeredList.Add("DataBound");  this.StateHasChanged(); })"
                     DataSourceChanged="@((e) => { EventTriggeredList.Add("DataSourceChanged"); this.StateHasChanged(); })"
                     OnDrawNode="@((e) => { EventTriggeredList.Add("OnDrawNode"); this.StateHasChanged(); })"
                     OnKeyPress="@((e) => { EventTriggeredList.Add("OnKeyPress"); this.StateHasChanged(); })"
                     NodeEdited="@((e) => { EventTriggeredList.Add("NodeEdited"); this.StateHasChanged(); })"
                     NodeEditing="@((e) => { EventTriggeredList.Add("NodeEditing"); this.StateHasChanged(); })"
                     NodeSelected="@((e) => { EventTriggeredList.Add("NodeSelected"); this.StateHasChanged(); })">
            <TreeViewFieldsSettings DataSource="@parentitem" Id="nodeId" ParentID="pid" Text="nodeText" HasChildren="hasChild" Expanded="expanded" Child="@child"></TreeViewFieldsSettings>
        </EjsTreeView>
    </div>

    <div class="control_wrapper">
        <ul style="list-style: none;padding: 0 20px;height: 200px;overflow: auto;">
            @for (int i = EventTriggeredList.Count - 1; i >= 0; i--)
            {
                <li>@EventTriggeredList[i]</li>
            }
        </ul>
    </div>
</div>

@code{
    object child;
    List<Parentitem> parentitem = new List<Parentitem>();
    List<string> EventTriggeredList = new List<string>();

    void OnCreate()
    {

    }

    protected override void OnInit()
    {
        base.OnInit();
        this.parentitem.Add(new Parentitem
        {
            nodeId = "01",
            nodeText = "Local Disk (C:)",
            child = new List<Childitem>()
    {
                new Childitem { nodeId = "01-01", nodeText = "Program Files" },
                new Childitem { nodeId = "01-02", nodeText = "Users"},
                new Childitem { nodeId = "01-03", nodeText = "Windows" }
            },
        });

        this.parentitem.Add(new Parentitem
        {
            nodeId = "02",
            nodeText = "Local Disk (D:)",
            child = new List<Childitem>()
{
                new Childitem { nodeId = "02-01", nodeText = "Personals" },
                new Childitem { nodeId = "02-02", nodeText = "Projects" },
                new Childitem { nodeId = "02-02", nodeText = "Office" }
            },
        });

        this.parentitem.Add(new Parentitem
        {
            nodeId = "03",
            nodeText = "Local Disk (E:)",
            child = new List<Childitem>()
    {
                new Childitem { nodeId = "03-01", nodeText = "Pictures" },
                new Childitem { nodeId = "03-02", nodeText = "Documents", icon = "docx" },
                new Childitem { nodeId = "03-03", nodeText = "Study Materials" }
            },
        });
        this.child = "child";
    }
    public class Parentitem
    {
        public string nodeId { get; set; }
        public string nodeText { get; set; }
        public string icon { get; set; }
        public bool selected { get; set; }
        public List<Childitem> child;

    }
    public class Childitem
    {
        public string nodeId { get; set; }
        public string nodeText { get; set; }
        public string icon { get; set; }
        public bool selected { get; set; }
    }
}

<style>

    .control_wrapper {
        margin: 10px;
        width: 250px;
        overflow: hidden;
    }

    .control-section {
        display: flex;
    }
</style>
